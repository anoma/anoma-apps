module Interface.Transaction;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};
import Stdlib.Data.Set as Map open using {Map};
import Anoma open;
import Applib open;
import Resource open;

transferHello
  (standardInputs : StandardInputs)
  (existingHello : Resource)
  (receiver : ExternalIdentity)
  : Transaction :=
  let
    nonce := generateNonce (StandardInputs.randSeed standardInputs);
  in prepareTransaction@{
       standardInputs;
       consumed := Set.singleton existingHello;
       created :=
         Set.singleton
           mkHelloResource@{
             owner := receiver;
             nonce;
           };
     };

helloWorldIntent
  (standardInputs : StandardInputs)
  (existingHello : Resource)
  (receiver : ExternalIdentity)
  : Transaction :=
  prepareTransaction@{
    standardInputs;
    consumed := Set.singleton existingHello;
    created :=
      Set.singleton
        mkWorldResource@{
          owner := Identity.external (StandardInputs.caller standardInputs);
          nonce := generateNonce (StandardInputs.randSeed standardInputs);
        };
  };


prepareTransaction
  (standardInputs : StandardInputs)
  (consumed created : Set Resource)
  : Transaction :=
  let
    -- Put maps into the custom inputs that map:
    -- - nullifiers to consumed resources
    -- - commitments to created resources
    tagsAndCustomInputs :=
      computeTagsAndCustomInputs@{
        consumed;
        created;
      };

    tags := TagsAndCustomInputs.tags tagsAndCustomInputs;
    pair := tagsToPair tags;
    nullifiers := fst pair;
    commitments := snd pair;

    -- Put signed messages and signatures from the caller in the app data.
    -- The signed messages link back to the original consumed resources, where the signature verification is part of the resource logic requiring the commitments of created resources to be part of the action.
    appData :=
      Set.map (nullifier in nullifiers) {
          mkResourceRelationshipAppDataEntry@{
            signer := Identity.internal (StandardInputs.caller standardInputs);
            origin := Consumed nullifier;
            mustBeConsumed := Set.empty;
            mustBeCreated := commitments;
          }
        }
        |> Map.fromSet;
  in mkTransactionHelper@{
       roots := Set.singleton (StandardInputs.currentRoot standardInputs);
       actions :=
         Set.singleton
           mkActionHelper@{
             consumed;
             created;
             tags := TagsAndCustomInputs.tags tagsAndCustomInputs;
             appData;
             customInputs :=
               TagsAndCustomInputs.customInputs tagsAndCustomInputs;
           };
     };
