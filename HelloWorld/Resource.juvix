module Resource;

import Stdlib.Prelude open;
import Anoma open;
import Anoma.Builtin.System open;
import Applib open;
import Applib.Authorization.Check open public;
import Applib.Authorization.Check open public;
import Applib.Authorization.Message open public;

logic (publicInputs : Logic.Instance) (privateInputs : Logic.Witness) : Bool :=
  let
    tag := Logic.Instance.tag publicInputs;
    customInputs := Logic.Witness.customInputs privateInputs;
  in case tag of
       | Consumed nullifier :=
         case lookupResource nullifier customInputs of {
           | nothing := false
           | just self :=
             isAuthorizedBy@{
               signer := HasOwner.get self;
               origin := tag;
               publicInputs;
             }
         }
       | Created commitment := true;

-- You don't need to change anything below this point.
mkLabelledResource
  (label : String)
  (owner : ExternalIdentity)
  (nonce : Nonce)
  {ephemeral : Bool := false}
  : Resource :=
  mkResource@{
    logicRef := BindingReference.compute logic;
    labelRef := BindingReference.compute (mkLabel (anomaEncode label));
    valueRef := BindingReference.compute (mkValue (anomaEncode owner));
    quantity := 1;
    nonce;
    ephemeral;
    randSeed := UnusedRandSeed;
    nullifierKeyCommitment := Universal.nullifierKeyCommitment;
  };

mkHelloResource (owner : ExternalIdentity) (nonce : Nonce) : Resource :=
  mkLabelledResource@{
    label := "Hello";
    owner;
    nonce;
  };

mkWorldResource (owner : ExternalIdentity) (nonce : Nonce) : Resource :=
  mkLabelledResource@{
    label := "World";
    owner;
    nonce;
  };
