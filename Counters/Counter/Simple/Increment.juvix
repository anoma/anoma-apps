module Counter.Simple.Increment;

import Stdlib.Prelude open;
import Applib open;
import Counter.Simple.Resource open;

--- Increments the counter value by 1.
--- @param currentCounter The current counter to increment.
--- @param txContext The transaction function standard inputs.
--- @return The transaction object incrementing a counter.
increment
  {M : Type -> Type}
  {{Monad M}}
  {{Tx M}}
  (logic : Logic)
  (currentCounter : Resource)
  : M Transaction :=
  do {
    nonce <- genRandomNonce;
    let
      newCounter :=
        mkCounter@{
          logic;
          nonce;
          count := Resource.value currentCounter + 1;
        };

    in
    prepareStandardTransaction@{
      consumed := [currentCounter];
      created := [newCounter];
    };
  };

ctx (latestRoot : Nat) : TxContext :=
  TxContext.mk@{
    caller := Universal.identity;
    currentRoot := Root.fromNat latestRoot;
  };

main
  (logic : Logic)
  (currentCounter : Resource)
  (latestRoot : Nat)
  : TransactionRequest :=
  TransactionRequest.build 0 (ctx latestRoot) (increment logic currentCounter);
