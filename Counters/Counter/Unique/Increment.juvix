module Counter.Unique.Increment;

import Stdlib.Prelude open;
import Applib open;
import Counter.Unique.Resource open;
import Stdlib.Debug open;

increment
  {M : Type -> Type}
  {{Monad M}}
  {{Tx M}}
  (currentCounter : Resource)
  (logic : Logic)
  : M Transaction :=
  if
    | not (hasCounterKind currentCounter logic) :=
      failwith "The input resource has the wrong kind"
    | else :=
      do {
        nonce <- genRandomNonce;
        let
          newCounter :=
            mkCounter@{
              logic;
              nonce;
              uniqueLabel :=
                currentCounter |> Resource.label |> builtinAnomaDecode;
              count := Resource.value currentCounter + 1;
              ephemeral := false;
            };
        in
        prepareStandardTransaction@{
          consumed := [currentCounter];
          created := [newCounter];
        };
      };

txContext (latestRoot : Nat) : TxContext :=
  TxContext.mk@{
    caller := Universal.identity;
    currentRoot := Root.fromNat latestRoot;
  };

main
  (randSeed : Nat)
  (currentCounter : Resource)
  (logic : Logic)
  (latestRoot : Nat)
  : TransactionRequest :=
  TransactionRequest.build
    randSeed
    (txContext latestRoot)
    (increment currentCounter logic);
