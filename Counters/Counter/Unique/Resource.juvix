module Counter.Unique.Resource;

import Stdlib.Prelude open;
import Applib open;

--- The counter label being a wrapper around a nullifier.
type CounterLabel :=
  mk@{
    nullifier : Nullifier;
  }
with
  mkUnique (consumable : Resource) : CounterLabel := mk (Resource.Transparent.nullifier consumable);
end;

deriving instance
EqCounterLabel : Eq CounterLabel;

mkCounter
  (logic : Logic)
  (uniqueLabel : CounterLabel)
  (nonce : Nonce)
  (count : Nat)
  (ephemeral : Bool)
  : Resource :=
  Resource.mk@{
    logic := Encoded.encode logic;
    label := Label.mk (builtinAnomaEncode uniqueLabel);
    nonce;
    ephemeral;
    unusedRandSeed := 0;
    value := AnomaAtom.fromNat count;
    quantity := 1;
    nullifierKeyCommitment := Universal.nullifierKeyCommitment;
  };

counterKind (consumable : Resource) (logic : Logic) : Kind :=
  let
    dummyCounter :=
      mkCounter@{
        logic;
        uniqueLabel := CounterLabel.mkUnique consumable;
        nonce := Nonce.fromAnomaAtom 0;
        count := 0;
        ephemeral := true;
      };
  in kind dummyCounter;

getCount : Resource -> Nat := Resource.value >> AnomaAtom.toNat;

hasCounterKind (resource : Resource) (logic : Logic) : Bool :=
  let
    dummyCounter :=
      mkCounter@{
        logic;
        uniqueLabel := Resource.label resource |> Label.toNat |> builtinAnomaDecode;
        nonce := Nonce.fromAnomaAtom 0;
        count := 0;
        ephemeral := true;
      };
  in kind resource == kind dummyCounter;
