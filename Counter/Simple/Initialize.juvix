module Counter.Simple.Initialize;

import Stdlib.Prelude open;
import Applib open;
import Counter.Simple.Resource open;

--- Initializes a counter that can be incremented by everyone.
--- @param standardInputs The transaction function standard inputs.
--- @return The transaction object initializing a counter.
initialize
  (randSeed : Nat)
  (logic : Logic)
  (standardInputs : StandardInputs)
  : Transaction :=
  runTx
    randSeed
    standardInputs
    do {
      nonce1 <- genRandomNonce;
      nonce2 <- genRandomNonce;
      let
        initialCounter :=
          mkCounter@{
            logic;
            nonce := nonce2;
            ephemeral := false;
          };
      in
      prepareStandardTransaction@{
        consumed :=
          [
            mkCounter@{
              logic;
              nonce := nonce1;
              ephemeral := true;
            };
          ];
        created := [initialCounter];
      };
    };

std : StandardInputs :=
  mkStandardInputs@{
    caller := Universal.identity;
    currentRoot := mkRoot 0;
  };

-- TODO Require `StandardInputs` as input arguments.
main (logicEncoded : Encoded Logic) : TransactionRequest :=
  let
    logic := decode logicEncoded;
  in TransactionRequest.fromTransaction (initialize 0 logic std);
