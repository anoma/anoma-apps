module Counter.Unique.Increment;

import Stdlib.Prelude open;
import Applib open;
import Counter.Unique.Resource open;
import Stdlib.Debug open;

increment
  (randSeed : Nat)
  (currentCounter : Resource)
  (logic : Logic)
  (latestRoot : Nat)
  : Transaction :=
  let
    standardInputs :=
      mkStandardInputs@{
        caller := Universal.identity;
        currentRoot := mkRoot latestRoot;
      };
  in runTx
    randSeed
    standardInputs
    if
      | not (hasCounterKind currentCounter logic) :=
        failwith "The input resource has the wrong kind"
      | else :=
        do {
          nonce <- genRandomNonce;
          let
            newCounter :=
              mkCounter@{
                logic;
                nonce;
                uniqueLabel := currentCounter |> Resource.label |> builtinAnomaDecode;
                count := Resource.value currentCounter + 1;
                ephemeral := false;
              };
          in
          prepareStandardTransaction@{
            consumed := [currentCounter];
            created := [newCounter];
          };
        };

main
  (randSeed : Nat)
  (currentCounter : Encoded Resource)
  (logic : Encoded Logic)
  (latestRoot : Nat)
  : TransactionRequest :=
  increment
      randSeed
      (decode currentCounter)
      (decode logic)
      latestRoot
    |> TransactionRequest.fromTransaction;
