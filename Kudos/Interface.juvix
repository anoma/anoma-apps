module Interface;

import Stdlib.Prelude open;

import Anoma.Identity open;
import Anoma.Transaction open;
import Anoma.Resource open;

import Applib.Resource.Error open;
import Applib.Transaction as Transaction;

import Applib.Token.Resource open;
import Applib.Token.Label open;
import Applib.Intent.Asset open;
import Applib.Intent.Swap.Resource open;
import Applib.Intent.Swap.Solution open;

import Applib.Helpers open;

import Label open;

initialize
  (standardInputs : StandardInputs)
  (quantity : Quantity)
  (receiver : ExternalIdentity)
  : Result StandardError Transaction :=
  let
    self := standardInputs |> StandardInputs.identity |> Identity.external;
    token :=
      Token.create@{
        quantity;
        tokenLabel := mkKudoLabel self;
        owner := receiver
      };
  in Transaction.initialize@{
    standardInputs;
    toInitialize := token;
    maybeDummy := nothing
  };

finalize (standardInputs : StandardInputs) (token : Token) : Result StandardError Transaction :=
  let
    self : ExternalIdentity := standardInputs |> StandardInputs.identity |> Identity.external;
  in case isKudo (self) token of
       | false := throw notKudoError
       | true :=
         Transaction.finalize@{
           standardInputs;
           toFinalize := token
         };

send
  (standardInputs : StandardInputs)
  (token : Token)
  (quantity : Quantity)
  (receiver : ExternalIdentity)
  : Result StandardError Transaction :=
  let
    self : ExternalIdentity := standardInputs |> StandardInputs.identity |> Identity.external;
  in case isKudo self token of
       | false := throw notKudoError
       | true :=
         Transaction.send@{
           standardInputs;
           toSend := token;
           quantity;
           receiver
         };

transfer
  (standardInputs : StandardInputs)
  (token : Token)
  (receiver : ExternalIdentity)
  : Result StandardError Transaction :=
  let
    self : ExternalIdentity := standardInputs |> StandardInputs.identity |> Identity.external;
  in case isKudo (self) token of
       | false := throw notKudoError
       | true :=
         Transaction.transfer@{
           standardInputs;
           toTransfer := token;
           receiver
         };

split
  (standardInputs : StandardInputs)
  (token : Token)
  --  TODO refactor type
  (quantitiesAndReceivers : List (Pair Quantity ExternalIdentity))
  : Result StandardError Transaction :=
  let
    self : ExternalIdentity := standardInputs |> StandardInputs.identity |> Identity.external;
  in case isKudo self token of
       | false := throw notKudoError
       | true :=
         Transaction.split@{
           standardInputs;
           toSplit := token;
           quantitiesAndReceivers
         };

merge
  (standardInputs : StandardInputs)
  (tokens : List Token)
  (receiver : ExternalIdentity)
  : Result StandardError Transaction :=
  let
    self := standardInputs |> StandardInputs.identity |> Identity.external;
  in case all (t in tokens) {isKudo self t} of
       | false := throw notKudoError
       | true :=
         Transaction.merge@{
           standardInputs;
           toMerge := tokens;
           receiver
         };

swap
  (standardInputs : StandardInputs)
  (toSwap : List Token)
  (want : QuantifiedAssets)
  (solver : ExternalIdentity)
  : Result StandardError Transaction :=
  let
    self := standardInputs |> StandardInputs.identity |> Identity.external;
  in case all (t in toSwap) {isKudo self t} of
       | false := throw notKudoError
       | true :=
         Transaction.swap@{
           standardInputs;
           toSwap;
           intent :=
             SwapIntent.create@{
               want;
               receiver := self;
               solver
             }
         };

settle
  (standardInputs : StandardInputs)
  (transactions : List Transaction)
  (solutions : List Solution)
  : Result StandardError Transaction :=
  Transaction.settle@{
    standardInputs;
    transactions;
    solutions
  };
