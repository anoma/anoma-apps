module Interface;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};

import Anoma open;
import Applib open;

import Applib.Token open;
import Applib.Intent open;
import Applib.Transaction.Errors open;

import Label open;

notKudoError : DefaultError :=
  mkDefaultError@{
    msg := "The input resource is not a Kudo token.";
  };

initialize
  (standardInputs : StandardInputs)
  (quantity : Quantity)
  (receiver : ExternalIdentity)
  : Result StandardError Transaction :=
  let
    self := Identity.external (StandardInputs.caller standardInputs);
    nonce := generateNonce (StandardInputs.randSeed standardInputs);
    token :=
      Token.create@{
        nonce;
        quantity;
        tokenLabel := mkKudoLabel self;
        owner := receiver;
      };
  in Transaction.initialize@{
       standardInputs;
       toInitialize := token;
       maybeDummy := nothing;
     };

finalize
  (standardInputs : StandardInputs)
  (token : Token)
  : Result StandardError Transaction :=
  let
    self := Identity.external (StandardInputs.caller standardInputs);
  in case isKudo (self) token of
       | false := throw notKudoError
       | true :=
         Transaction.finalize@{
           standardInputs;
           toFinalize := token;
         };

send
  (standardInputs : StandardInputs)
  (token : Token)
  (quantity : Quantity)
  (receiver : ExternalIdentity)
  : Result StandardError Transaction :=
  let
    self := Identity.external (StandardInputs.caller standardInputs);
  in case isKudo self token of
       | false := throw notKudoError
       | true :=
         Transaction.send@{
           standardInputs;
           toSend := token;
           quantity;
           receiver;
         };

transfer
  (standardInputs : StandardInputs)
  (token : Token)
  (receiver : ExternalIdentity)
  : Result StandardError Transaction :=
  let
    self := Identity.external (StandardInputs.caller standardInputs);
  in case isKudo (self) token of
       | false := throw notKudoError
       | true :=
         Transaction.transfer@{
           standardInputs;
           toTransfer := token;
           receiver;
         };

split
  (standardInputs : StandardInputs)
  (token : Token)
  --  TODO refactor type
  (quantitiesAndReceivers : List (Pair Quantity ExternalIdentity))
  : Result StandardError Transaction :=
  let
    self := Identity.external (StandardInputs.caller standardInputs);
  in case isKudo self token of
       | false := throw notKudoError
       | true :=
         Transaction.split@{
           standardInputs;
           toSplit := token;
           quantitiesAndReceivers;
         };

merge
  (standardInputs : StandardInputs)
  (tokens : List Token)
  (receiver : ExternalIdentity)
  : Result StandardError Transaction :=
  let
    self := Identity.external (StandardInputs.caller standardInputs);
  in case
       all (t in tokens) {
         isKudo self t
       }
     of
       | false := throw notKudoError
       | true :=
         Transaction.merge@{
           standardInputs;
           toMerge := tokens;
           receiver;
         };

swap
  (standardInputs : StandardInputs)
  (toSwap : Set Token)
  (want : Asset.QuantifiedAssets)
  (solver : ExternalIdentity)
  : Result StandardError Transaction :=
  let
    self := Identity.external (StandardInputs.caller standardInputs);
    nonce := generateNonce (StandardInputs.randSeed standardInputs);
  in case
       all (t in Set.toList toSwap) {
         isKudo self t
       }
     of
       | false := throw notKudoError
       | true :=
         Transaction.swap@{
           standardInputs;
           toSwap;
           intent :=
             Swap.SwapIntent.create@{
               nonce;
               want;
               receiver := self;
               solver;
             };
         };

settle
  (standardInputs : StandardInputs)
  (transactions : Set Transaction)
  (solutions : Set Swap.Solution)
  : Result StandardError Transaction :=
  Transaction.settle@{
    standardInputs;
    transactions;
    solutions;
  };
