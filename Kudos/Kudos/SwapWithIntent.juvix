module Kudos.SwapWithIntent;

import Stdlib.Prelude open;
import Applib open;
import Anoma.Identity.External open;
import Anoma.Identity.Internal open;
import Kudos.Layer open;
import Kudos.Extra open;
import Kudos.Create as Create;

includesKudos
  (kudosKind : Kind)
  (quantity : Nat)
  (receiver : ExternalIdentity)
  (resourcesToCheck : List Resource)
  : Bool :=
  any (r in resourcesToCheck) {
    quantity <= Resource.quantity r
      && kudosKind == kind r
      && receiver == Kudos.Resource.owner r
  };

swapIntentLogic (publicInputs : Instance) (privateInputs : Witness) : Bool :=
  let
    tag := Tag.fromNat (Instance.tag publicInputs);

    -- the important case
    ephemeralConsumptionBranch (self : Resource) : Bool :=
      let
        solver := Kudos.Resource.owner self;

        checkSolverIdentity : Bool :=
          Create.isAuthorizedBy@{
            signer := solver;
            origin := tag;
            publicInputs;
          };

        intentLabel : SwapIntentLabel :=
          builtinAnomaDecode (Resource.label self);

        checkIntentSatisfied : Bool :=
          includesKudos@{
            kudosKind := SwapIntentLabel.kind intentLabel;
            quantity := SwapIntentLabel.quantity intentLabel;
            receiver := SwapIntentLabel.receiver intentLabel;
            resourcesToCheck := Witness.created privateInputs;
          };

      in checkSolverIdentity && checkIntentSatisfied;

  in case tag of
       | Consumed nullifier :=
         case
           findResourceByNullifier (Nullifier.toNat nullifier) privateInputs
         of {
           | nothing :=
             trace "findResourceByNullifier returned nothing" >-> false
           | just self :=
             if
               | Resource.ephemeral self := ephemeralConsumptionBranch self
               | else := false
         }
       | Created commitment :=
         case
           findResourceByCommitment (Commitment.toNat commitment) privateInputs
         of
           | nothing :=
             trace "findResourceByCommitment returned nothing" >-> false
           | just self :=
             if
               | Resource.ephemeral self := true
               | else := false;

type SwapIntentLabel :=
  mk@{
    receiver : ExternalIdentity;
    quantity : Nat;
    kind : Kind;
  };

main
  (root : Nat)
  (rngSeed : Nat)
  (privateKeyPayload publicKeyPayload : ByteArray)
  (kudosLogic : Logic)

  (giveSymbol : String)
  (giveOriginator : ByteArray)
  (giveQuantity : Nat)

  (wantSymbol : String)
  (wantOriginator : ByteArray)
  (wantQuantity : Nat)
  : Transaction :=
  let
    caller : Identity :=
      mkIdentityFromPayload privateKeyPayload publicKeyPayload;

    helper {M : Type -> Type} {{Monad M}} {{Tx M}} : M Transaction :=
      do {
        nonceIntent <- genRandomNonce;
        nonceConsumed <- genRandomNonce;
        let
          owner := ExternalIdentity.fromByteArray publicKeyPayload;
          consumedResource : Resource :=
            Create.mkKudos@{
              nonce := nonceConsumed;
              owner;
              logic := kudosLogic;
              originator := ExternalIdentity.fromByteArray giveOriginator;
              quantity := giveQuantity;
              kudosSymbol := giveSymbol;
            };
          solver : ExternalIdentity := Universal.externalIdentity;
          label : Kudos.Label :=
            Kudos.Label.mk@{
              originator := ExternalIdentity.fromByteArray wantOriginator;
              kudosSymbol := wantSymbol;
            };
          kudosKind : Kind := computeKudosKind kudosLogic label;

          swapIntent : Resource :=
            Resource.mk@{
              logic := swapIntentLogic;
              nonce := Nonce.toNat nonceIntent;
              ephemeral := true;
              quantity := 1;
              randSeed := 0;
              label :=
                builtinAnomaEncode
                  SwapIntentLabel.mk@{
                    kind := kudosKind;
                    quantity := wantQuantity;
                    receiver := ExternalIdentity.fromByteArray publicKeyPayload;
                  };
              value := 0;
              nullifierKeyCommitment := ExternalIdentity.toNat solver;
            };

          createdResource : Resource := swapIntent;

          consumed : List Resource := [consumedResource];
          created : List Resource := [createdResource];
        in
        a <- actionWithAuthorizationAppData@{
               created;
               consumed;
             };
        root <- TxContext.currentRoot <$> getTxContext;
        let
          actions : List Action := [a];
          delta : Delta := Action.listDelta actions;
        in
        pure
          Transaction.mk@{
            roots := [Root.unRoot root];
            actions;
            delta;
            deltaProof : Nat := proveDelta delta;
          };
      };

  in Tx.run rngSeed (txContext caller root) helper;

txContext (caller : Identity) (latestRoot : Nat) : TxContext :=
  TxContext.mk@{
    caller;
    currentRoot := Root.fromNat latestRoot;
  };
