module Kudos.Split;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};
import Stdlib.Data.Map as Map open using {Map};
import Applib open;
import Stdlib.Debug.Fail open;
import Anoma.Builtin.System open;
import Anoma.Identity.External open;
import Anoma.Identity.Internal open;
import Kudos.Layer open;
import Kudos.Extra open;

txContext (caller : Identity) (latestRoot : Nat) : TxContext :=
  TxContext.mk@{
    caller;
    currentRoot := Root.fromNat latestRoot;
  };

split
  {M : Type -> Type}
  {{Monad M}}
  {{Tx M}}
  (kudosLogic : Logic)
  (toSplit : Resource)
  (receiversPartition : List (Pair ExternalIdentity Nat))
  : M Transaction :=
  do {
    caller <- TxContext.caller <$> getTxContext;
    let
      self := Identity.external caller;
    in
    case Kudos.Resource.isKudo kudosLogic toSplit of {
      | false := failwith "not kudos"
      | true :=
        splitHelper@{
          toSplit;
          receiversPartition;
        }
    };
  };

splitHelper
  {M : Type -> Type}
  {{Monad M}}
  {{Tx M}}
  (toSplit : Resource)
  (receiversPartition : List (Pair ExternalIdentity Nat))
  : M Transaction :=
  do {
    txCtx <- getTxContext;
    splitResources <- mapM (receiver, quantity in receiversPartition) {
      do {
        nonce <- genRandomNonce;
        toSplit
          |> Kudos.Resource.setOwner receiver
          |> (@Resource{quantity})
          |> (@Resource{nonce := Nonce.toNat nonce})
          |> pure;
      }
    };
    let
      currentRoot := TxContext.currentRoot txCtx;
    in
    a <- actionWithAuthorizationAppData@{
           consumed := [toSplit];
           created := splitResources;
         };
    pure
      TransactionHelper.mk@{
        roots := [currentRoot];
        actions := [a];
      };

  };

main
  (latestRoot : Nat)
  (randSeed : Nat)
  (ownerPrivateKeyPayload : ByteArray)
  (ownerPublicKeyPayload : ByteArray)
  (receiversInput : List (Encoded (Pair ExternalIdentity Nat)))
  (toSplit : Resource)
  (logic : Logic)
  : TransactionRequest :=
  let
    receivers : List (Pair ExternalIdentity Nat) :=
      map Encode.decode receiversInput;
    callerIdentity : Identity :=
      IdentityFromPayload.mk@{
        privateKey := ownerPrivateKeyPayload;
        publicKey := ownerPublicKeyPayload;
      };
    totalQuantity : Nat :=
      for (acc := 0) (_, n in receivers) {
        acc + n
      };
  in if
    | totalQuantity /= Resource.quantity toSplit :=
      failwith "total receivers quantity must be equal to toSplit quantity"
    | else :=
      TransactionRequest.build
        randSeed
        (txContext callerIdentity latestRoot)
        (split logic toSplit receivers);
