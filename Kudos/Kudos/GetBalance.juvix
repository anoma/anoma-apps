module Kudos.GetBalance;

import Stdlib.Prelude open;
import Stdlib.Data.Map as Map open using {Map};
import Applib open;
import Applib.Show open;
import Stdlib.Debug.Fail open;
import Kudos.Layer open;

aggregateBalance
  (ownedResources : List (Encoded Resource)) : Map (Encoded String) Nat :=
  for (acc := Map.empty) (r in map Encoded.decode ownedResources) {
    let
      i : Kudos.KLabel := Kudos.Resource.identity r;
      encodedSymbol : Encoded String :=
        Kudos.KLabel.kudosSymbol i |> Encoded.encode;
    in Map.insertWith (+) encodedSymbol (Resource.quantity r) acc
  };

main (ownedResources : List (Encoded Resource)) : String :=
  for (acc := "") (encodedSymbol, balance in aggregateBalance ownedResources) {
    acc
      ++str Encoded.decode encodedSymbol
      ++str " : "
      ++str recursiveNatToString balance
      ++str "\n"
  };
