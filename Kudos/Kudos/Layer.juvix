module Kudos.Layer;

import Kudos.Extra open;
import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};
import Stdlib.Data.Map as Map open using {Map};
import Applib open;
import Anoma.Builtin.System open;
import Anoma.Identity.External open;
import Anoma.Identity.Internal open;
import Kudos.Extra open;

computeKudosKind (logic : Logic) (label : Kudos.Label) : Kind :=
  computeKind logic (builtinAnomaEncode label);

ResourceRelationshipAppDataEntry.mk
  (signer : InternalIdentity)
  (origin : Tag)
  (mustBeConsumed : List Nullifier)
  (mustBeCreated : List Commitment)
  : Kudos.PublicDataValue :=
  let
    resourceRelationship : ResourceRelationship :=
      ResourceRelationship.mk@{
        origin;
        mustBeConsumed;
        mustBeCreated;
      };
    signature : Signature :=
      sign@{
        message := resourceRelationship;
        signer;
      };
  in Kudos.PublicDataValue.mk@{
       resourceRelationship;
       signature := trace "PublicDataValue.mk signature" >-> trace signature >-> signature;
     };

actionWithAuthorizationAppData
  {M : Type -> Type}
  {{Monad M}}
  {{Tx M}}
  (created : List Resource)
  (consumed : List Resource)
  : M Action :=
  do {
    caller <- TxContext.caller <$> getTxContext;
    let
      nullifiers := map nullifier consumed;
      commitments := map commitment created;

      -- Put signed messages and signatures by the owner in the app data.
      -- The signed messages link back to the original consumed resources,
      -- where the signature verification is part of the resource logic
      -- requiring the commitments of created resources to be part of the
      -- action.
      appDataMap : Map Nat Kudos.PublicData :=
        (map (n in nullifiers) {
              let
                nestedMap : Kudos.PublicData :=
                  Map.singleton
                    signatureLookupKey
                    ResourceRelationshipAppDataEntry.mk@{
                      signer := Identity.internal caller;
                      origin := Consumed (Nullifier.mk n);
                      mustBeConsumed := [];
                      mustBeCreated := map Commitment.mk commitments;
                    };
              in n, nestedMap
            }
            ++ map (c in commitments) {
              let
                nestedMap : Kudos.PublicData := Map.empty;
              in c, nestedMap
            })
          |> Map.fromList;
      map' : Map Nat AnomaAtom :=
        map (builtinAnomaEncode >> AnomaAtom.fromNat) appDataMap;
    in
    pure
      mkActionHelper@{
        consumed;
        created;
        appData := AppData.fromMap map';
      };
  };

module Kudos;

  PublicData : Type := Map AnomaAtom PublicDataValue;

  type PublicDataValue :=
    PublicDataValue.mk@{
      resourceRelationship : ResourceRelationship;
      signature : Signature;
    };

  module Instance;
    otherPublic (instance : Instance) : Kudos.PublicData :=
      builtinAnomaDecode
        (AnomaAtom.toNat (Applib.Instance.otherPublic instance));
  end;

  module Resource;
    open Applib.Resource using {quantity; nonce; logic; ephemeral} public;

    isKudo (kudosLogic : Logic) (resource : Resource) : Bool :=
      computeKind kudosLogic (Resource.label resource) == kind resource;

    identity (r : Resource) : Kudos.Label :=
      builtinAnomaDecode (Applib.Resource.label r);

    owner (r : Resource) : ExternalIdentity :=
      ExternalIdentity.fromByteArray
        (fromAnomaContents 32 (Applib.Resource.nullifierKeyCommitment r));

    setOwner (newOwner : ExternalIdentity) (r : Resource) : Resource :=
      r@Resource{
        nullifierKeyCommitment :=
          toAnomaContents (ExternalIdentity.toByteArray newOwner);
      };

    Resource.mk
      (logic : Logic)
      (ephemeral : Bool)
      (quantity : Nat)
      (owner : ExternalIdentity)
      (label : Label)
      (nonce : Nonce)
      : Resource :=
      Applib.Resource.mk@{
        logic;
        ephemeral;
        quantity;
        nonce := Nonce.toNat nonce;
        randSeed := 0;
        value := 0;
        nullifierKeyCommitment :=
          -- FIXME the owner should not be put here. We temporarily have it here
            -- because the indexer looks at this field at the moment.
            toAnomaContents
            (ExternalIdentity.toByteArray owner);
        label := builtinAnomaEncode label
      };
  end;

  open Resource using {Resource.mk} public;

  type Label :=
    Label.mk@{
      originator : ExternalIdentity;
      --- E.g. '‚Ç¨' 'üêÇ' 'üôÄ'
      kudosSymbol : String;
    };
end;
